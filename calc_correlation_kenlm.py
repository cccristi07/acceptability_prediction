"""
Stdin:          N/A
Stdout:         N/A
Author:         Jey Han Lau
Date:           May 16
"""

import argparse
import sys
import kenlm
import codecs
import os
from scipy.stats.mstats import pearsonr, spearmanr


#parser arguments
desc = "Calculate correlation, using scores generated by KenLM (only computes sentence level logprob)"
parser = argparse.ArgumentParser(description=desc)

#####################
#positional argument#
#####################
parser.add_argument("test_file", help="test sentences")
parser.add_argument("gold_file", help="gold standard rating of test sentences")
parser.add_argument("model_dir", help="KLM model dir")

###################
#optional argument#
###################
args = parser.parse_args()

#parameters
debug = True


###########
#functions#
###########

######
#main#
######
#get all the test sentences
test_sentences = [ item.strip() for item in codecs.open(args.test_file).readlines() ]

#get all the ratings
test_ratings = [ float(item.strip()) for item in open(args.gold_file).readlines() ]

#get the unigram log prob from the model
unigram_logprob = {}
for line in codecs.open(os.path.join(args.model_dir, "model.arpa")):
    line = line.strip()
    data = line.split("\t")
    if line == "\\2-grams:":
        break
    elif len(data) >= 2:
        unigram_logprob[data[1]] = float(data[0])

#get the log prob scores
model = kenlm.LanguageModel(os.path.join(args.model_dir, "model.klm"))
logprobs = []
mean_logprobs = []
norm_logprobs = []
slors = []
for s in test_sentences:
    uni = 0.0
    for w in s.split() + ["</s>"]:
    #for w in s.split():
        uni += unigram_logprob[w]

    fs = model.full_scores(s)
    n = 0
    logprob = 0.0
    for p, l in fs:
        logprob += p
        n += 1
        
    logprobs.append(logprob)
    mean_logprobs.append(logprob / n)
    norm_logprobs.append(logprob / uni * -1.0)
    slors.append((logprob - uni) / n)

#calculate correlation
print "logprob =", pearsonr(logprobs, test_ratings)[0]
print "mean logprob =", pearsonr(mean_logprobs, test_ratings)[0]
print "norm logprob =", pearsonr(norm_logprobs, test_ratings)[0]
print "slor =", pearsonr(slors, test_ratings)[0]
